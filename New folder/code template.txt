// import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import * as sharp from 'sharp';

type WriteStringOptions = {
  text: string;
  x: number;
  y: number;
  size?: number;
};

// @Injectable()
export class PdfService {
  private writeText(page: any, font: any, opts: WriteStringOptions): void {
    const { text, x, y, size = 8 } = opts;
    page.drawText(String(text), { x, y, size, font, color: rgb(0, 0, 0) });
  }

  private async embedImageFromUrl(
    pdfDoc: PDFDocument,
    url: string,
    errorMessage: string,
  ) {
    const res = await fetch(url);
    const contentType = res.headers.get('content-type') || '';
    const arrayBuffer = await res.arrayBuffer();

    if (
      contentType?.toLowerCase().includes('jpeg') ||
      contentType?.toLowerCase().includes('jpg')
    ) {
      try {
        return await pdfDoc.embedJpg(arrayBuffer);
      } catch {
        const fixedBuffer = await sharp(arrayBuffer).jpeg().toBuffer();
        return await pdfDoc.embedJpg(fixedBuffer);
      }
    } else if (contentType?.toLowerCase().includes('png')) {
      try {
        return await pdfDoc.embedPng(arrayBuffer);
      } catch {
        const fixedBuffer = await sharp(arrayBuffer).png().toBuffer();
        return await pdfDoc.embedPng(fixedBuffer);
      }
    }
    throw new Error(errorMessage);
  }

  async generateInvestorFormPdf(data: {
    // top section: registration number, sale number, amount, bank info, unit price
    templateName: string;
    registrationNumber: string;
    saleNumber: string;
    amount: string;
    amountInWords: string;
    chequeNumber: string;
    bankName: string;
    bankBranchName: string;
    units: string;
    unitPrice: string;
    // principal applicant section
    investorName: string;
    fatherName: string;
    motherName: string;
    spouseName: string;
    dob: string;
    occupation: string;
    nationality: string;
    nid: string;
    presentAddress: string;
    permanentAddress: string;
    boAccount: string;
    mobile: string;
    email: string;
    investorBankName: string;
    investorBankBranchName: string;
    investorBankAccountNumber: string;
    investorBankRoutingNumber: string;
    etin: string;
    residencyStatus: string;
    dividendOption: string;
    investmentOption: string;
    investorPhotoUrl: string;
    investorSignatureUrl: string;
    // joint investor section
    jointInvestorName: string;
    jointFatherName: string;
    jointMotherName: string;
    jointSpouseName: string;
    jointDob: string;
    jointOccupation: string;
    jointNationality: string;
    jointNid: string;
    jointPresentAddress: string;
    jointPermanentAddress: string;
    jointMobile: string;
    jointEmail: string;
    jointPhotoUrl: string;
    jointSignatureUrl: string;
  }): Promise<Buffer> {
    const templatePath = path.join(
      __dirname,
      `templates/investor-forms/${data.templateName}-form.pdf`,
    );

    if (!fs.existsSync(templatePath)) {
      throw new Error('Investor registration form template not found');
    }

    const pdfBytes = fs.readFileSync(templatePath);
    const pdfDoc = await PDFDocument.load(pdfBytes);
    const page1 = pdfDoc.getPages()[0];
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

    const writeText = (opts: WriteStringOptions) =>
      this.writeText(page1, font, opts);

    // top section: registration number, sale number, amount, bank info, unit price
    writeText({ text: data.registrationNumber, x: 524, y: 695, size: 7.5 });
    writeText({ text: data.saleNumber, x: 524, y: 683, size: 7.5 });
    writeText({ text: data.amount, x: 90, y: 633, size: 7.5 });
    writeText({ text: data.amountInWords, x: 270, y: 633, size: 7.5 });
    writeText({ text: data.chequeNumber, x: 120, y: 620, size: 7.5 });
    writeText({ text: data.bankName, x: 247, y: 620, size: 7.5 });
    writeText({ text: data.bankBranchName, x: 420, y: 620, size: 7.5 });
    writeText({ text: data.unitPrice, x: 120, y: 608, size: 7.5 });
    writeText({ text: data.units, x: 415, y: 608, size: 7.5 });

    // Principal Applicant section
    writeText({ text: data.registrationNumber, x: 188, y: 566, size: 7.5 });
    writeText({ text: data.investorName, x: 50, y: 553, size: 7.5 });
    writeText({ text: data.fatherName, x: 80, y: 540, size: 7.5 });
    writeText({ text: data.motherName, x: 85, y: 528.5, size: 7.5 });
    writeText({ text: data.spouseName, x: 85, y: 517, size: 7.5 });
    writeText({ text: data.dob, x: 75, y: 505, size: 7.5 });
    writeText({ text: data.occupation, x: 261, y: 505, size: 7.5 });
    writeText({ text: data.nationality, x: 68, y: 492, size: 7.5 });
    writeText({ text: data.nid, x: 267, y: 492, size: 7.5 });
    writeText({ text: data.presentAddress, x: 88, y: 480, size: 7.5 });
    writeText({ text: data.permanentAddress, x: 100, y: 467, size: 7.5 });
    writeText({ text: data.boAccount, x: 60, y: 456, size: 7.5 });
    writeText({ text: data.mobile, x: 265, y: 456, size: 7.5 });
    writeText({ text: data.email, x: 50, y: 444, size: 7.5 });
    writeText({ text: data.investorBankName, x: 240, y: 444, size: 7.5 });
    writeText({ text: data.investorBankBranchName, x: 53, y: 432, size: 7.5 });
    writeText({
      text: data.investorBankAccountNumber,
      x: 248,
      y: 432,
      size: 7.5,
    });
    writeText({
      text: data.investorBankRoutingNumber,
      x: 87,
      y: 419,
      size: 7.5,
    });
    writeText({ text: data.etin, x: 260, y: 419, size: 7.5 });
    // writeText({ text: data.residencyStatus, x: 50, y: 408, size: 7.5 });
    // writeText({ text: data.dividendOption, x: 265, y: 408, size: 7.5 });
    // writeText({ text: data.investmentOption, x: 50, y: 396, size: 7.5 });
    //add investor photo
    const investorPhotoImage = await this.embedImageFromUrl(
      pdfDoc,
      data.investorPhotoUrl,
      'Investor photo image must be a JPEG or PNG image',
    );

    page1.drawImage(investorPhotoImage, {
      x: 439,
      y: 440,
      width: 107,
      height: 105,
    });
    // add investor signature
    const investorSignatureImage = await this.embedImageFromUrl(
      pdfDoc,
      data.investorSignatureUrl,
      'Investor signature image must be a JPEG or PNG image',
    );

    page1.drawImage(investorSignatureImage, {
      x: 60,
      y: 60,
      width: 80,
      height: 30,
    });

    // joint investor section
    // writeText({ text: data.jointInvestorName, x: 188, y: 566, size: 7.5 });
    // writeText({ text: data.jointFatherName, x: 100, y: 553, size: 7.5 });
    // writeText({ text: data.jointMotherName, x: 100, y: 540, size: 7.5 });
    // writeText({ text: data.jointSpouseName, x: 100, y: 527, size: 7.5 });
    // writeText({ text: data.jointDob, x: 75, y: 514, size: 7.5 });
    // writeText({ text: data.jointOccupation, x: 261, y: 514, size: 7.5 });
    // writeText({ text: data.jointNationality, x: 68, y: 501, size: 7.5 });
    // writeText({ text: data.jointNid, x: 267, y: 501, size: 7.5 });
    return Buffer.from(await pdfDoc.save());
  }
}
 